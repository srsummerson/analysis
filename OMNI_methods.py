import numpy as np
import scipy as sp
import re
from neo import io
import pandas as pd


def convert_OMNI(filename, **kwargs):
	'''
	This method converts csv files saved using the OMNI device to a pandas DataFrame for easy
	analysis in Python.

	Input:
		- filename: string containing the file path for a csv file saved with the OMNI device
	Optional inputs:
		- save_pkl: True/False to save pkl file, default is False
		- new_file_path: location to save new pkl file
		- animal_id: string containing subject's name, e.g. Mario, for naming of saved pkl file
		
	Output:
		- data: pandas DataFrame, M rows x N columns, M = number of data points, N = number of channels + 1, 
				first N -1 columns corresponds to data from the differnt channels while the Nth column 
				contains the timestamps 

	'''
	kwargsdict = {}
	kwargsdict['save_pkl'] = False
	expected_args = ['save_pkl', 'new_file_path','animal_id']
	for key in kwargs.keys():
		if key in expected_args:
			kwargsdict[key] = kwargs[key]
		else:
			raise Exception("Unexpected Argument")

	f = open(filename,'r')

	header = [line.strip() for i,line in enumerate(f) if (line.strip() != '')&(i < 2)]
	year = header[1][:4]  	# assumes date has format YYYY-MM-DD
	month = header[1][5:7] 	# assumes date has format YYYY-MM-DD
	day = header[1][8:10] 	# assumes date has format YYYY-MM-DD

	data = pd.read_csv(filename,sep=',',header=None,skiprows=[0,1])

	if kwargsdict['save_pkl']:
		pkl_filename = kwargsdict['animal_id'] + year + month + day + '_OMNIdata.pkl'
		new_filename = kwargsdict['new_file_path']+pkl_filename
		data.to_pickle(new_filename)

	f.close()

	return data


def plotRawLFPTraces(data, **kwargs):
	'''
	This method plots the raw LFP data for all channels or a subset of channels in a single plot 
	for easy viewing. 

	Input:
		- data: pandas DataFrame, as generated by the convert_OMNI method
	Optional input:
		- channs: list of channels to be plotted
	'''

	return